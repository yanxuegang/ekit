package mapreduce

import "github.com/gotomicro/ego-kit/pkg/stream"

func MapSlice[S, T](s []S, mapper Mapper[S, T]) []T {
	res := make([]T, 0, len(s))
	for _, ele := range s {
		res = append(res, mapper(ele))
	}
	return res
}

func MapStream[S, T](s *stream.SequentialStream[S], mapper Mapper) *stream.SequentialStream[T] {
	res := make([]T, 0, s.Count())
	s.ForEach(func(e S) {
		res = append(res, mapper(e))
	})
	return stream.Of(res)
}

func ReduceSlice[E, R](slice []E, base R, accumulator Accumulator) R {
	res := base
	for _, ele := range slice {
		res = accumulator(res, ele)
	}
	return res
}

func ReduceStream[E, R](s *stream.SequentialStream, base R, accumulator Accumulator) R {
	res := base
	s.ForEach(func(e E) {
		res = accumulator(res, e)
	})
	return res
}

type Mapper func[S, T](s S) T
type Accumulator func[E, R](preResult R, current E) R