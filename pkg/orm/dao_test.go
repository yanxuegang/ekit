// Code generated by go2go; DO NOT EDIT.


//line dao_test.go2:1
package dao

//line dao_test.go2:1
import (
//line dao_test.go2:1
 "context"
//line dao_test.go2:1
 "errors"
//line dao_test.go2:1
 "github.com/gotomicro/ego-kit/pkg/proxy"
//line dao_test.go2:1
 "reflect"
//line dao_test.go2:1
 "testing"
//line dao_test.go2:1
)

//line dao_test.go2:8
func TestDaoInsert(t *testing.T) {
	userDAO := instantiate୦୦NewDAO୦dao୮aUserDAO()
	userDAO.Base = instantiate୦୦NewDAO୦dao୮aBaseDAO୮6dao୮aUser୮7()
	i, _ := userDAO.Base.Insert(context.Background(), &User{})
	println(i)
}

//line dao.go2:30
func instantiate୦୦NewDAO୦dao୮aUserDAO() *UserDAO {
	var handler instantiate୦proxy୦InvocationHandler୦dao୮aUserDAO = &instantiate୦୦InvocationHandler୦dao୮aUserDAO{}
	return instantiate୦proxy୦New୦dao୮aUserDAO(handler)
}
//line dao.go2:30
func instantiate୦୦NewDAO୦dao୮aBaseDAO୮6dao୮aUser୮7() *instantiate୦୦BaseDAO୦dao୮aUser {
	var handler instantiate୦proxy୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7 = &instantiate୦୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7{}
	return instantiate୦proxy୦New୦dao୮aBaseDAO୮6dao୮aUser୮7(handler)
}

//line dao.go2:33
type instantiate୦proxy୦InvocationHandler୦dao୮aUserDAO interface {
//line dao.go2:42
 Handle(target *UserDAO,

//line dao.go2:43
  inv *proxy.Invocation) []reflect.
				Value
//line dao.go2:44
}
//line dao.go2:44
type instantiate୦୦InvocationHandler୦dao୮aUserDAO struct {
//line dao.go2:37
}

func (i *instantiate୦୦InvocationHandler୦dao୮aUserDAO,) Handle(target *UserDAO,

//line dao.go2:39
 inv *proxy.Invocation) []reflect.Value {
	println("hello")
	return []reflect.Value{reflect.ValueOf(int64(10)), reflect.ValueOf(errors.New("this is error"))}

//line dao.go2:54
}
//line dao.go2:6
func instantiate୦proxy୦New୦dao୮aUserDAO(handler instantiate୦proxy୦InvocationHandler୦dao୮aUserDAO,

//line dao.go2:11
 opts ...instantiate୦proxy୦proxyOpt୦dao୮aUserDAO,
) *UserDAO {
	obj := new(UserDAO,
	)

	objValue := reflect.
		ValueOf(obj)
//line dao.go2:17
 objElem := objValue.Elem()
			num := objElem.NumField()
//line dao.go2:18
 objElemType := objElem.Type()
//line dao.go2:18
 for i := 0; i < num; i++ {
//line dao.go2:18
  field := objElem.Field(i)
//line dao.go2:21
  fieldType := objElemType.Field(i)
				tag := fieldType.Tag
//line dao.go2:22
  mn := tag.Get("proxy_method")
				var method reflect.Method
				if len(mn) != 0 {
//line dao.go2:24
   method, _ =
				objValue.Type().MethodByName(mn)
//line dao.go2:25
  }
//line dao.go2:25
  if field.Kind() == reflect.Func && field.CanSet() {
			rts := make(
				[]reflect.Type, 0, fieldType.Type.NumOut())
//line dao.go2:27
   for j :=

//line dao.go2:30
    0; j < fieldType.Type.NumOut(); j++ {
				rts = append(rts, fieldType.Type.Out(j))
//line dao.go2:31
   }
			field.Set(reflect.MakeFunc(
						field.
//line dao.go2:35
     Type(), func(args []reflect.Value) (
							results []reflect.
//line dao.go2:39
      Value) {
//line dao.go2:39
     inv := &proxy.Invocation{Args: args, Method: method, Tag: tag}
//line dao.go2:41
     return handler.Handle(obj, inv)
//line dao.go2:41
    }))
//line dao.go2:41
  }
//line dao.go2:41
 }
//line dao.go2:41
 return obj
//line dao.go2:41
}

//line dao.go2:41
type instantiate୦proxy୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7 interface {
			Handle(target *instantiate୦୦BaseDAO୦dao୮aUser, inv *proxy.Invocation) []reflect.
//line dao.go2:44
  Value
//line dao.go2:44
}
//line dao.go2:44
type instantiate୦୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7 struct {
//line dao.go2:37
}

func (i *instantiate୦୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7,) Handle(target *instantiate୦୦BaseDAO୦dao୮aUser, inv *proxy.Invocation) []reflect.Value {
	println("hello")
	return []reflect.Value{reflect.ValueOf(int64(10)), reflect.ValueOf(errors.New("this is error"))}

//line dao.go2:54
}
//line dao.go2:6
func instantiate୦proxy୦New୦dao୮aBaseDAO୮6dao୮aUser୮7(handler instantiate୦proxy୦InvocationHandler୦dao୮aBaseDAO୮6dao୮aUser୮7,

//line dao.go2:11
 opts ...instantiate୦proxy୦proxyOpt୦dao୮aBaseDAO୮6dao୮aUser୮7,
) *instantiate୦୦BaseDAO୦dao୮aUser {
	obj := new(instantiate୦୦BaseDAO୦dao୮aUser,
	)

	objValue := reflect.
		ValueOf(obj)
//line dao.go2:17
 objElem := objValue.Elem()
			num := objElem.NumField()
//line dao.go2:18
 objElemType := objElem.Type()
//line dao.go2:18
 for i := 0; i < num; i++ {
//line dao.go2:18
  field := objElem.Field(i)
//line dao.go2:21
  fieldType := objElemType.Field(i)
				tag := fieldType.Tag
//line dao.go2:22
  mn := tag.Get("proxy_method")
				var method reflect.Method
				if len(mn) != 0 {
//line dao.go2:24
   method, _ =
				objValue.Type().MethodByName(mn)
//line dao.go2:25
  }
//line dao.go2:25
  if field.Kind() == reflect.Func && field.CanSet() {
			rts := make(
				[]reflect.Type, 0, fieldType.Type.NumOut())
//line dao.go2:27
   for j :=

//line dao.go2:30
    0; j < fieldType.Type.NumOut(); j++ {
				rts = append(rts, fieldType.Type.Out(j))
//line dao.go2:31
   }
			field.Set(reflect.MakeFunc(
						field.
//line dao.go2:35
     Type(), func(args []reflect.Value) (
							results []reflect.
//line dao.go2:39
      Value) {
//line dao.go2:39
     inv := &proxy.Invocation{Args: args, Method: method, Tag: tag}
//line dao.go2:41
     return handler.Handle(obj, inv)
//line dao.go2:41
    }))
//line dao.go2:41
  }
//line dao.go2:41
 }
//line dao.go2:41
 return obj
//line dao.go2:41
}

//line dao.go2:41
type instantiate୦proxy୦proxyOpt୦dao୮aUserDAO func(target *UserDAO,)
//line dao.go2:6
type instantiate୦proxy୦proxyOpt୦dao୮aBaseDAO୮6dao୮aUser୮7 func(target *instantiate୦୦BaseDAO୦dao୮aUser,)

//line dao.go2:6
var _ = context.Background
//line dao.go2:6
var _ = errors.As

//line dao.go2:6
type _ proxy.Importable୦

//line dao.go2:6
var _ = reflect.Append
//line dao.go2:6
var _ = testing.AllocsPerRun
