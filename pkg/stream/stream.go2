package stream

import (
	"errors"
	"github.com/gotomicro/ego-kit/pkg/mapreduce"
	"sort"
)

var ErrNotFound = errors.New("element not found")

type Stream[E any] interface {
	OrElse(e E) Stream[E]
	Filter(m match[E]) Stream[E]
	Distinct(c comparator[E]) Stream[E]
	Sort(c comparator[E]) Stream[E]
	Limit(offset int, limit int) Stream[E]
	Skip(num int) Stream[E]
	ForEach(f func(e E)) Stream[E]
	ToSlice() []E
	Max(c comparator[E]) (E, error)
	Min(c comparator[E]) (E, error)
	AnyMatch(m match[E]) bool
	AllMatch(m match[E]) bool
	NoneMatch(m match[E]) bool
	Count() int
	FindFirst(m match[E]) (E, error)
	FindLast(m match[E]) (E, error)
	FindAny(m match[E]) (E, error)
	FindNth(n int, m match[E]) (E, error)
	Concat(tail Stream[E]) Stream[E]
	ConcatArray(tail []E) Stream[E]

	MapToInt(m func(e E) int) Stream[int]
	MapToString(m func(e E) string) Stream[string]
	MapToInterface(m func(e E)interface{}) Stream[interface{}]

	ReduceToInt(base int, r func(acc int, e E) int) int
	ReduceToString(base string, r func(acc string, e E) string) string
	ReduceToInterface(base interface{}, r func(acc interface{}, e E)) interface{}
}

func Of[E any](elems []E) *SequentialStream[E] {
	return &SequentialStream[E]{
		eles: elems,
		filters: make([]match[E], 0, 4),
	}
}

var _ Stream[int] = Of[int]([]int{1})

type SequentialStream[E any] struct {
	eles []E
	def  E
	filters []match[E]
}

func (s *SequentialStream[E]) OrElse(e E) Stream[E] {
	s.def = e
	return s
}

func (s *SequentialStream[E]) Filter(m match[E]) Stream[E] {
	s.filters = append(s.filters, m)
	return s
}

func (s *SequentialStream[E]) doFilters() []E {
	res := make([]E, 0, 4)
	for _, ele := range s.eles {
		if s.matchAll(s.filters, ele) {
			res = append(res, ele)
		}
	}
	return res
}

func (s *SequentialStream[E]) matchAll(filters []match[E], e E) bool {
	for _, filter := range filters {
		if !filter(e) {
			return false
		}
	}
	return true
}

// Distinct return the slice that contains unique element
func (s *SequentialStream[E]) Distinct(c comparator[E]) Stream[E] {
	eles := s.doFilters()
	res := make([]E, 0, len(eles))
	// TODO optimize
	for i := 0; i < len(eles); i++ {
		found := false
		for j := i + 1; j < len(eles); j++ {
			if c(s.eles[i], s.eles[j]) == 0 {
				found = true
			}
		}
		if !found {
			res = append(res, eles[i])
		}
	}
	return Of[E](res)
}

// Sort stable sort
func (s *SequentialStream[E]) Sort(c comparator[E]) Stream[E] {
	eles := s.doFilters()
	sort.SliceStable(eles, func(i, j int) bool {
		return c(eles[i], eles[j]) < 0
	})
	return Of[E](eles)
}

func (s *SequentialStream[E]) Limit(offset int, limit int) Stream[E] {
	eles := s.doFilters()
	res := make([]E, 0, len(eles))
	for i := range eles {
		if i >= offset && len(res) <= limit {
			res = append(res, eles[i])
		}
	}
	return Of[E](res)
}

func (s *SequentialStream[E]) Skip(num int) Stream[E] {
	eles := s.doFilters()
	res := make([]E, 0, len(eles))
	for i := range eles {
		if i >= num {
			res = append(res, eles[i])
		}
	}

	return Of[E](res)
}

func (s *SequentialStream[E]) ForEach(f func(e E)) Stream[E] {
	eles := s.doFilters()
	for i := range eles {
		f(eles[i])
	}
	return Of[E](eles)
}

func (s *SequentialStream[E]) ToSlice() []E {
	return s.doFilters()
}

func (s *SequentialStream[E]) Max(c comparator[E]) (E, error) {
	eles := s.doFilters()
	if len(eles) == 0 {
		return s.def, ErrNotFound
	}
	res := eles[0]
	for i := 1; i < len(eles); i++ {
		cur := eles[i]
		if c(res, cur) < 0 {
			res = cur
		}
	}
	return res, nil
}

func (s *SequentialStream[E]) Min(c comparator[E]) (E, error) {
	eles := s.doFilters()
	if len(eles) == 0 {
		return s.def, ErrNotFound
	}
	res := eles[0]
	for i := 1; i < len(eles); i++ {
		cur := eles[i]
		if c(res, cur) > 0 {
			res = cur
		}
	}
	return res, nil
}

func (s *SequentialStream[E]) AnyMatch(m match[E]) bool {
	filters := append(s.filters, m)
	for _, e := range s.eles {
		if s.matchAll(filters, e) {
			return true
		}
	}
	return false
}

func (s *SequentialStream[E]) AllMatch(m match[E]) bool {
	filters := append(s.filters, m)
	for _, e := range s.eles {
		if !s.matchAll(filters, e) {
			return false
		}
	}
	return true
}

func (s *SequentialStream[E]) NoneMatch(m match[E]) bool {
	filters := append(s.filters, m)
	for _, e := range s.eles {
		if s.matchAll(filters, e) {
			return false
		}
	}
	return true
}

func (s *SequentialStream[E]) Count() int {
	eles := s.doFilters()
	return len(eles)
}

func (s *SequentialStream[E]) FindFirst(m match[E]) (E, error) {
	return s.FindNth(0, m)
}

func (s *SequentialStream[E]) FindLast(m match[E]) (E, error) {
	filters := append(s.filters, m)
	for i := len(s.eles) - 1; i  >= 0; i -- {
		if s.matchAll(filters, s.eles[i]) {
			return s.eles[i], nil
		}
	}
	return s.def, ErrNotFound
}

func (s *SequentialStream[E]) FindAny(m match[E]) (E, error) {
	return s.FindFirst(m)
}

func (s *SequentialStream[E]) FindNth(n int, m match[E]) (E, error) {
	filters := append(s.filters, m)
	cnt := 0
	for _, e := range s.eles {
		if s.matchAll(filters, e) {
			if cnt == n {
				return e, nil
			}
			cnt ++
		}
	}
	return s.def, ErrNotFound
}

func (s *SequentialStream[E]) Concat(tail Stream[E]) Stream[E] {
	res := make([]E, 0)
	tail.ForEach(func(e E) {
		res = append(s.eles, e)
	})
	return Of[E](res)
}

func (s *SequentialStream[E]) ConcatArray(tail []E) Stream[E] {
	res := make([]E, 0)
	res = append(s.eles, tail...)
	return Of[E](res)
}

type match[E any] func(e E) bool

type comparator[E any] func(e1, e2 E) int

type Streamable interface {
	Next() (Streamable, bool)
}