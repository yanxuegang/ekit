package stream

import (
	"sync"
)

type ParallelStream[E any] struct {
	SequentialStream[E]
}

//var _ Stream[int] = &ParallelStream[int]{}

// 有坑，重构为baseStream也不行
func (p *ParallelStream[E]) FindAny(m match[E]) (E, error) {
	filters := append(p.filters, m)
	ch := make(chan interface{})
	wg := sync.WaitGroup{}
	for _, e := range p.eles {
		wg.Add(1)
		go func(ele E) {
			if p.matchAll(filters, ele) {
				ch <- ele
			}
			wg.Done()
		}(e)
	}

	go func() {
		wg.Wait()
		ch <- ErrNotFound
	}()

	select {
	case data := <- ch:
		if res, ok := data.(E); ok {
			return res, nil
		}
		return p.def, ErrNotFound
	}
}

func (p *ParallelStream[E]) ForEach(f func(e E)) {
	wg := sync.WaitGroup{}
	wg.Add(len(p.eles))
	for _, e := range p.eles {
		go func(ele E) {
			if p.matchAll(p.filters, ele) {
				f(ele)
			}
			wg.Done()
		}(e)
	}
	wg.Wait()
}
