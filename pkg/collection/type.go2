package collection

type Set[E any] interface {
	Put(e E) error
	Exist(e E) (bool, error)
	ForEach(func(e E))
	Traverse() []E
}

type OrderedSet[K any] interface {
	Set[K]
}

type List[E any] interface {
	Len() int
	Empty() bool
	Clear()
	Add(val E, index int)
	Set(val E, index int)
	Remove(index int)
	Append(val E)
	ForEach(f func(e E))
	Get(index int) (E, bool)
	Traverse() []E
}

type Map[K any, V any] interface {
	Put(key K, val V)
	PutIfAbsent(key K, val V)

	Get(key K) (V, bool)
	GetOrDefault(key K, defProvider func()V) V

	Remote(key K)(V, bool)
}

type Hashable interface {
	HashCode() int
}

type Queue[E any] interface {
	Front() E
	Back() E
	Push(e E)
	Pop() E
}

type Stack[E any] interface {
	Push(e E)
	Pop() E
	Peek() E
}

type Heap[E any] interface {
}

type Tree[E any] interface {
}

type BinaryTree[E any] interface {
	Tree[E]
}

type RedBlackTree[E any] interface {
	Tree[E]
}
