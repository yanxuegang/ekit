// Code generated by go2go; DO NOT EDIT.


//line queue_test.go2:1
package collection

//line queue_test.go2:1
import (
//line queue_test.go2:1
 "math/rand"
//line queue_test.go2:1
 "reflect"
//line queue_test.go2:1
 "sync"
//line queue_test.go2:1
 "testing"
//line queue_test.go2:1
 "time"
//line queue_test.go2:1
)

//line queue_test.go2:8
func TestQueueAPI(t *testing.T) {

				q := instantiate୦୦CreateQueue୦int()

//line queue_test.go2:13
 q.Push(100)
	q.Push(79)
	q.Push(38)

	if q.Len() != 3 {
		t.Fatalf("unexpected length of queue.")
	}

	if !reflect.DeepEqual(q.Traverse(), []int{100, 79, 38}) {
		t.Fatalf("unexpected Traverse!")
	}

	if q.Front() != 100 {
		t.Fatalf("unexpected first value.")
	}
	if q.Back() != 38 {
		t.Fatalf("unexpected last value.")
	}

	val := q.Pop()
	if val != 100 {
		t.Fatalf("unexpected value.")
	}

	if q.Front() != 79 {
		t.Fatalf("unexpected first value.")
	}
	if q.Back() != 38 {
		t.Fatalf("unexpected last value.")
	}

	val = q.Pop()
	if val != 79 {
		t.Fatalf("unexpected value.")
	}

	if q.Len() != 1 {
		t.Fatalf("unexpected length of queue.")
	}

	if q.Front() != 38 {
		t.Fatalf("unexpected first value.")
	}
	if q.Back() != 38 {
		t.Fatalf("unexpected last value.")
	}

	q.Clear()
	if !q.Empty() {
		t.Fatalf("expected empty.")
	}

}
//line queue.go2:8
func instantiate୦୦CreateQueue୦int() *instantiate୦୦queue୦int {
	return &instantiate୦୦queue୦int{
		l: instantiate୦୦CreateLinkedList୦int(),
	}
}

//line queue.go2:12
type instantiate୦୦queue୦int struct {
//line queue.go2:5
 l *instantiate୦୦linkedList୦int
}

//line queue.go2:14
func (q *instantiate୦୦queue୦int,) Len() int {
	return q.l.len
}

func (q *instantiate୦୦queue୦int,) Empty() bool {
	return q.l.len == 0
}

func (q *instantiate୦୦queue୦int,) Clear() {
	q.l.Clear()
}

func (q *instantiate୦୦queue୦int,) Traverse() []int {
	ret := make([]int, q.l.len)
	cur := q.l.head.Next
	for i := 0; i < q.l.Len(); i++ {
		ret[i], cur = cur.Val, cur.Next
	}
	return ret
}

//line queue.go2:37
func (q *instantiate୦୦queue୦int,) Front() int {
	return q.l.Front()
}

//line queue.go2:43
func (q *instantiate୦୦queue୦int,) Back() int {
	return q.l.Back()
}

//line queue.go2:48
func (q *instantiate୦୦queue୦int,) Push(val int,

//line queue.go2:48
) {
	q.l.Append(val)
}

//line queue.go2:54
func (q *instantiate୦୦queue୦int,) Pop() int {
	val := q.Front()
	q.l.Remove(0)
	return val
}

//line queue.go2:58
var _ = rand.ExpFloat64
//line queue.go2:58
var _ = reflect.Append

//line queue.go2:58
type _ sync.Cond

//line queue.go2:58
var _ = testing.AllocsPerRun

//line queue.go2:58
const _ = time.ANSIC
