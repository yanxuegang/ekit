// Code generated by go2go; DO NOT EDIT.


//line stack_test.go2:1
package collection

//line stack_test.go2:1
import (
//line stack_test.go2:1
 "math/rand"
//line stack_test.go2:1
 "reflect"
//line stack_test.go2:1
 "sync"
//line stack_test.go2:1
 "testing"
//line stack_test.go2:1
 "time"
//line stack_test.go2:1
)

//line stack_test.go2:8
func TestStack(t *testing.T) {

	s := instantiate୦୦CreateStack୦int()

	s.Push(100)
	s.Push(79)
	s.Push(38)

	if s.Len() != 3 {
		t.Fatalf("unexpected length of queue.")
	}

	if !reflect.DeepEqual(s.Traverse(), []int{38, 79, 100}) {
		t.Fatalf("unexpected Traverse!")
	}

	if s.Peek() != 38 {
		t.Fatalf("unexpected top of stack.")
	}

	val := s.Pop()
	if val != 38 {
		t.Fatalf("unexpected value.")
	}

	val = s.Pop()
	if val != 79 {
		t.Fatalf("unexpected value.")
	}

	if s.Len() != 1 {
		t.Fatalf("unexpected length of queue.")
	}

	if s.Peek() != 100 {
		t.Fatalf("unexpected top of stack.")
	}

//line stack_test.go2:47
 s.Clear()
	if !s.Empty() {
		t.Fatalf("expected empty.")
	}
}
//line stack.go2:7
func instantiate୦୦CreateStack୦int() *instantiate୦୦stack୦int {
	return &instantiate୦୦stack୦int{
		l: instantiate୦୦CreateLinkedList୦int(),
	}
}

//line stack.go2:11
type instantiate୦୦stack୦int struct {
//line stack.go2:4
 l *instantiate୦୦linkedList୦int
}

//line stack.go2:13
func (s *instantiate୦୦stack୦int,) Len() int {
	return s.l.len
}

func (s *instantiate୦୦stack୦int,) Empty() bool {
	return s.l.len == 0
}

//line stack.go2:22
func (s *instantiate୦୦stack୦int,) Clear() {
	s.l.Clear()
}

func (s *instantiate୦୦stack୦int,) Traverse() []int {
	ret := make([]int, s.l.len)
	cur := s.l.tail.Prev
	for i := 0; i < s.l.Len(); i++ {
		ret[i], cur = cur.Val, cur.Prev
	}
	return ret
}

//line stack.go2:37
func (s *instantiate୦୦stack୦int,) Peek() int {
	return s.l.Back()
}

//line stack.go2:42
func (s *instantiate୦୦stack୦int,) Push(val int,

//line stack.go2:42
) {
	s.l.Append(val)
}

//line stack.go2:48
func (s *instantiate୦୦stack୦int,) Pop() int {
	val := s.l.Back()
	s.l.Remove(-1)
	return val
}

//line stack.go2:52
var _ = rand.ExpFloat64
//line stack.go2:52
var _ = reflect.Append

//line stack.go2:52
type _ sync.Cond

//line stack.go2:52
var _ = testing.AllocsPerRun

//line stack.go2:52
const _ = time.ANSIC
