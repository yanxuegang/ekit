// Code generated by go2go; DO NOT EDIT.


//line proxy_test.go2:1
package proxy

//line proxy_test.go2:1
import (
//line proxy_test.go2:1
 "errors"
//line proxy_test.go2:1
 "reflect"
//line proxy_test.go2:1
 "testing"
//line proxy_test.go2:1
)

//line proxy_test.go2:9
func TestNewProxy(t *testing.T) {
	ho := instantiate୦୦New୦proxy୮aHelloObj(&instantiate୦୦LogInvocationHandler୦proxy୮aHelloObj{})
	err := ho.Hello("Tom")
	println(err.Error())
}

//line proxy_test.go2:27
type HelloObj struct {
	Hello func(name string) error
}
//line proxy_test.go2:29
type instantiate୦୦LogInvocationHandler୦proxy୮aHelloObj struct {
//line proxy_test.go2:17
}

func (l *instantiate୦୦LogInvocationHandler୦proxy୮aHelloObj,) Handle(target *HelloObj,

//line proxy_test.go2:19
 inv *Invocation) []reflect.Value {
	println("before")
	println("running " + inv.Method.Name)

	println("after")
	return []reflect.Value{reflect.ValueOf(errors.New("this is error"))}
}
//line proxy.go2:9
func instantiate୦୦New୦proxy୮aHelloObj(handler instantiate୦୦InvocationHandler୦proxy୮aHelloObj, opts ...instantiate୦୦proxyOpt୦proxy୮aHelloObj,) *HelloObj {
	obj := new(HelloObj)
	objValue := reflect.ValueOf(obj)
	objElem := objValue.Elem()
	num := objElem.NumField()
	objElemType := objElem.Type()

	for i := 0; i < num; i++ {
		field := objElem.Field(i)
		fieldType := objElemType.Field(i)
		tag := fieldType.Tag
		mn := tag.Get("proxy_method")

		var method reflect.Method
		if len(mn) != 0 {
			method, _ = objValue.Type().MethodByName(mn)
		}

		if field.Kind() == reflect.Func && field.CanSet() {
			rts := make([]reflect.Type, 0, fieldType.Type.NumOut())
			for j := 0; j < fieldType.Type.NumOut(); j++ {
				rts = append(rts, fieldType.Type.Out(j))
			}

			field.Set(reflect.MakeFunc(field.Type(), func(args []reflect.Value) (results []reflect.Value) {
				inv := &Invocation{
					Args:   args,
					Method: method,
					Tag:    tag,
//line proxy.go2:39
    }
				return handler.Handle(obj, inv)
			}))
		}
	}
	return obj
}

//line proxy.go2:45
type instantiate୦୦InvocationHandler୦proxy୮aHelloObj interface {
//line proxy.go2:48
 Handle(target *HelloObj,

//line proxy.go2:48
  inv *Invocation) []reflect.Value
}
//line proxy.go2:49
type instantiate୦୦proxyOpt୦proxy୮aHelloObj func(target *HelloObj)

//line proxy.go2:7
var _ = errors.As
//line proxy.go2:7
var _ = reflect.Append
//line proxy.go2:7
var _ = testing.AllocsPerRun
